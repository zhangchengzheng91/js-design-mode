/*
* 技巧型设计模式
* 未来预言家 --- 委托模式：多个对象接收并处理同一请求，他们将请求委托给另一个对象统一
* 处理请求。
*
* 事件委托
* 使用for 循环绑定点击事件，无形中增加了很多事件，事件多了，内存消耗就大了。
* 委托父元素去绑定事件。
*
* 完整事件流：事件捕获 --- 触发该事件 --- 事件冒泡
*
* 预言未来 -- 为当前不存在的节点绑定事件
*
* 内存外泄 -- 垃圾回收机制 -- 老版本 IE 采用引用计数的垃圾回收机制
*   将事件绑定到父组件
*
* 数据分发：不在分步依次获取所需的数据，而是一次性获取所有的数据，然后再筛选返回的数据；
* 将多次的请求操作，合并为一次。
*
* 委托模式是通过委托者将请求委托给被委托者去实现处理的。因此委托模式解决了请求与委托者
* 直接的耦合。通过被委托者对接收到的请求的处理后，分发给相应的委托者去处理。
*
* 在 Javascript 中，委托模式已经得到很广泛的应用，尤其在处理事件上，当然委托模式是一
* 种基础技巧，因此也同样在其他实际模式中被引用，如状态模式中状态对象对接收的状态处理，
* 策略模式中策略对象对接收的算法处理，命令哦是中命令对象对接收到的命令处理等。
* */


